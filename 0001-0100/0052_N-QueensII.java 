class Solution {
    int ans = 0;
    public int totalNQueens(int n) {
        boolean[][] chessboard = new boolean[n][n];
        backTracking(chessboard, 0, n);
        return ans;
    }

    private void backTracking(boolean[][] chessboard, int i, int n)
    {
        if (i >= n) {
            ans++;
            return;
        }

        for (int j = 0;j<n;j++) {
            boolean canPut = true;
            for (int k = 0;k<i;k++) {
                if (chessboard[k][j]) {
                    canPut = false;
                    break;
                }
            }
            if (!canPut) continue;
            int tmpi = i-1;
            int tmpjl = j-1;
            int tmpjr = j+1;
            while(tmpi >= 0) {
                if (tmpjl >= 0 && chessboard[tmpi][tmpjl]) {
                    canPut = false;
                    break;
                }
                if (tmpjr < n && chessboard[tmpi][tmpjr]) {
                    canPut = false;
                    break;
                }
                tmpi--;
                tmpjl--;
                tmpjr++;
            }
            if (!canPut) continue;

            chessboard[i][j] = true;
            backTracking(chessboard, i+1, n);
            chessboard[i][j] = false;
        }
    }
}